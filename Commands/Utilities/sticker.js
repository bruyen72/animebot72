const fs = require('fs');
const path = require('path');
const { tmpdir } = require('os');
const { exec } = require('child_process');
const { promisify } = require('util');
const execPromise = promisify(exec);
const fileType = require('file-type');
const { downloadMediaMessage } = require('@whiskeysockets/baileys');

// ==================== CONFIGURA√á√ïES ULTRA INTELIGENTES - RESOLVE TODOS OS ERROS ====================
const MAX_STICKER_SIZE = 512;
const MAX_ANIMATION_SIZE = 512;
const ANIMATION_FPS = 15;
const MAX_VIDEO_DURATION = 8;
const TEMP_DIR = path.join(tmpdir(), 'yaka_stickers');
const WEBP_QUALITY = 75;
const MIN_STICKER_SIZE = 430;

// SEGREDO PRINCIPAL: Limites ultra rigorosos para WhatsApp
const MAX_FILE_SIZE_KB_STRICT = 350; // M√°ximo rigoroso para celulares
const MAX_FILE_SIZE_KB_ULTRA_SAFE = 250; // Ultra seguro para v√≠deos pesados
const TIMEOUT_DOWNLOAD = 120000;
const TIMEOUT_FFMPEG = 180000;

// Garantir diret√≥rio
if (!fs.existsSync(TEMP_DIR)) {
    fs.mkdirSync(TEMP_DIR, { recursive: true });
    console.log(`[‚úÖ] Diret√≥rio tempor√°rio criado: ${TEMP_DIR}`);
} else {
    console.log(`[‚ÑπÔ∏è] Diret√≥rio tempor√°rio j√° existe: ${TEMP_DIR}`);
}

// FUN√á√ÉO SECRETA: Sistema ultra inteligente baseado no tamanho
const getUltraSmartSettings = (fileSizeBytes) => {
    const fileSizeMB = fileSizeBytes / (1024 * 1024);
    console.log(`[üìä] Tamanho original: ${fileSizeMB.toFixed(2)}MB`);
    
    let quality, fps, duration, targetSizeKB;
    
    // ULTRA INTELIGENTE: Quanto maior o arquivo, menor a qualidade
    if (fileSizeMB > 15) { // >15MB - Arquivo gigante
        quality = 35;
        fps = 8;
        duration = 3;
        targetSizeKB = MAX_FILE_SIZE_KB_ULTRA_SAFE;
        console.log(`[üî•] ARQUIVO GIGANTE (${fileSizeMB.toFixed(1)}MB) - Configura√ß√µes m√≠nimas para funcionar`);
    }
    else if (fileSizeMB > 10) { // >10MB - Muito grande
        quality = 40;
        fps = 10;
        duration = 4;
        targetSizeKB = MAX_FILE_SIZE_KB_ULTRA_SAFE;
        console.log(`[üî•] MUITO GRANDE (${fileSizeMB.toFixed(1)}MB) - Configura√ß√µes ultra agressivas`);
    }
    else if (fileSizeMB > 7) { // >7MB - Grande
        quality = 45;
        fps = 12;
        duration = 5;
        targetSizeKB = MAX_FILE_SIZE_KB_ULTRA_SAFE;
        console.log(`[‚ö°] GRANDE (${fileSizeMB.toFixed(1)}MB) - Configura√ß√µes agressivas`);
    }
    else if (fileSizeMB > 4) { // >4MB - M√©dio-grande
        quality = 50;
        fps = 14;
        duration = 6;
        targetSizeKB = MAX_FILE_SIZE_KB_STRICT;
        console.log(`[‚ö°] M√âDIO-GRANDE (${fileSizeMB.toFixed(1)}MB) - Configura√ß√µes rigorosas`);
    }
    else if (fileSizeMB > 2) { // >2MB - M√©dio
        quality = 60;
        fps = 15;
        duration = 7;
        targetSizeKB = MAX_FILE_SIZE_KB_STRICT;
        console.log(`[‚ö°] M√âDIO (${fileSizeMB.toFixed(1)}MB) - Configura√ß√µes moderadas`);
    }
    else { // <2MB - Normal
        quality = 70;
        fps = 15;
        duration = 8;
        targetSizeKB = MAX_FILE_SIZE_KB_STRICT;
        console.log(`[‚úÖ] NORMAL (${fileSizeMB.toFixed(1)}MB) - Configura√ß√µes padr√£o`);
    }
    
    return { quality, fps, duration, targetSizeKB, originalSizeMB: fileSizeMB };
};

// FUN√á√ÉO SECRETA: Verificar se arquivo est√° no limite
const checkFileSizeAndAdjust = async (filePath, targetSizeKB, settings, isVideo) => {
    const stats = fs.statSync(filePath);
    const currentSizeKB = stats.size / 1024;
    
    console.log(`[üìä] Arquivo gerado: ${currentSizeKB.toFixed(1)}KB (Limite: ${targetSizeKB}KB)`);
    
    if (currentSizeKB <= targetSizeKB) {
        console.log(`[‚úÖ] Arquivo dentro do limite! ${currentSizeKB.toFixed(1)}KB`);
        return { success: true, size: currentSizeKB };
    }
    
    console.log(`[‚ö†Ô∏è] Arquivo muito grande! ${currentSizeKB.toFixed(1)}KB > ${targetSizeKB}KB - Reprocessando...`);
    return { success: false, size: currentSizeKB };
};

// FUN√á√ÉO SECRETA: Reprocessar com configura√ß√µes ultra agressivas
const reprocessWithUltraSettings = async (inputFile, outputFile, settings, isVideo) => {
    // Configura√ß√µes ultra agressivas
    const ultraQuality = Math.max(25, settings.quality - 15);
    const ultraFPS = Math.max(6, settings.fps - 4);
    const ultraDuration = Math.max(2, settings.duration - 2);
    
    console.log(`[üî•] REPROCESSANDO com configura√ß√µes ULTRA: Q:${ultraQuality}%, FPS:${ultraFPS}, ${ultraDuration}s`);
    
    let ultraCmd;
    if (isVideo) {
        ultraCmd = `ffmpeg -i "${inputFile}" -vf "fps=${ultraFPS},scale=480:480:force_original_aspect_ratio=decrease,pad=512:512:16:16:color=white" -c:v libwebp -lossless 0 -compression_level 1 -q:v ${ultraQuality} -method 0 -loop 0 -preset default -an -ss 00:00:00 -t 00:00:${ultraDuration} "${outputFile}" -y`;
    } else {
        ultraCmd = `ffmpeg -i "${inputFile}" -vf "scale=480:480:force_original_aspect_ratio=decrease,pad=512:512:16:16:color=white" -compression_level 1 -q:v ${ultraQuality} -method 0 "${outputFile}" -y`;
    }
    
    await execPromise(ultraCmd, { timeout: TIMEOUT_FFMPEG });
    
    const stats = fs.statSync(outputFile);
    const finalSizeKB = stats.size / 1024;
    console.log(`[‚úÖ] Reprocessamento conclu√≠do: ${finalSizeKB.toFixed(1)}KB`);
    
    return finalSizeKB;
};

const checkFFmpeg = async () => {
    try {
        await execPromise('ffmpeg -version');
        console.log('[‚úÖ] FFmpeg dispon√≠vel');
        return true;
    } catch (e) {
        console.error('[‚ùå] FFmpeg n√£o encontrado:', e.message);
        return false;
    }
};

module.exports = {
    name: "sticker",
    alias: ["e"],
    desc: "Converte imagem/v√≠deo/gif para figurinha - ULTRA INTELIGENTE PARA V√çDEOS PESADOS",
    category: "Search",
    usage: ".sticker [responda uma m√≠dia]",
    react: "üñºÔ∏è",
    start: async (Yaka, m, { prefix, quoted, mime, body }) => {
        console.log(`[üöÄ] Comando .sticker ULTRA INTELIGENTE iniciado!`);
        console.log(`[üìã] Par√¢metros:`, {
            body: body,
            prefix: prefix,
            hasQuoted: !!quoted,
            mime: mime,
            messageType: m.mtype || 'undefined'
        });

        // Verificar FFmpeg
        const ffmpegAvailable = await checkFFmpeg();
        if (!ffmpegAvailable) {
            return m.reply('‚ùå Sistema de convers√£o indispon√≠vel.');
        }

        const filesToCleanup = [];
        let processingMsg = null;

        try {
            // Valida√ß√µes b√°sicas - MANTENDO SUA ESTRUTURA
            console.log(`[üîç] Verificando comando...`);
            if (body && !body.toLowerCase().startsWith('.sticker') && !body.toLowerCase().startsWith('.s')) {
                console.log(`[‚ùå] Comando inv√°lido: ${body}`);
                return;
            }
            console.log(`[‚úÖ] Comando v√°lido!`);

            console.log(`[üîç] Verificando m√≠dia quotada...`);
            if (!quoted) {
                console.log(`[‚ùå] Nenhuma m√≠dia quotada`);
                return m.reply(`‚ö†Ô∏è Envie ou responda uma imagem/v√≠deo com ${prefix}sticker`);
            }
            console.log(`[‚úÖ] M√≠dia quotada encontrada!`);

            // Detec√ß√£o MIME melhorada
            console.log(`[üîç] Verificando MIME: ${mime}`);
            if (!mime || (!mime.startsWith('image/') && !mime.startsWith('video/'))) {
                console.log(`[‚ùå] MIME inv√°lido: ${mime}`);
                
                let detectedMime = null;
                if (quoted.message?.imageMessage) {
                    detectedMime = quoted.message.imageMessage.mimetype || 'image/jpeg';
                } else if (quoted.message?.videoMessage) {
                    detectedMime = quoted.message.videoMessage.mimetype || 'video/mp4';
                }
                
                if (detectedMime && (detectedMime.startsWith('image/') || detectedMime.startsWith('video/'))) {
                    console.log(`[‚úÖ] MIME corrigido: ${detectedMime}`);
                    mime = detectedMime;
                } else {
                    return m.reply(`‚ö†Ô∏è Envie uma imagem/v√≠deo com ${prefix}sticker`);
                }
            }
            console.log(`[‚úÖ] MIME v√°lido: ${mime}`);

            // Verificar fakeObj
            console.log(`[üîç] Verificando fakeObj...`);
            if (!quoted.fakeObj) {
                console.error("[‚ùå] fakeObj ausente");
                if (quoted.message) {
                    console.log("[üîÑ] Usando m√©todo alternativo...");
                    quoted.fakeObj = quoted.message;
                } else {
                    return m.reply("‚ùå Erro ao acessar m√≠dia. Tente novamente.");
                }
            }
            console.log(`[‚úÖ] fakeObj dispon√≠vel!`);

            // Mensagem de processamento
            processingMsg = await m.reply('‚è≥ Processando com sistema ultra inteligente... V√≠deos grandes podem demorar...');

            // Fun√ß√µes de limpeza - MANTENDO SUA ESTRUTURA
            const cleanupFiles = () => {
                console.log(`[üßπ] Limpando ${filesToCleanup.length} arquivos...`);
                filesToCleanup.forEach(file => {
                    if (fs.existsSync(file)) {
                        try {
                            fs.unlinkSync(file);
                            console.log(`[‚úÖ] Removido: ${path.basename(file)}`);
                        } catch (e) {
                            console.warn(`[‚ö†Ô∏è] Falha ao remover: ${file}`);
                        }
                    }
                });
            };

            const removeProcessingMsg = async () => {
                if (processingMsg) {
                    try {
                        await Yaka.sendMessage(m.from || m.chat, { delete: processingMsg.key });
                    } catch (e) {
                        console.warn("[‚ö†Ô∏è] N√£o consegui remover mensagem de processamento");
                    }
                }
            };

            // Download robusto
            console.log(`[‚¨áÔ∏è] Download com sistema robusto...`);
            let buffer;
            try {
                let attempts = 0;
                const maxAttempts = 3;
                
                while (attempts < maxAttempts) {
                    attempts++;
                    console.log(`[‚¨áÔ∏è] Tentativa ${attempts}/${maxAttempts}...`);
                    
                    try {
                        buffer = await downloadMediaMessage(quoted.fakeObj, 'buffer', {}, {
                            logger: {
                                info: msg => console.log(`[‚ÑπÔ∏è] ${msg}`),
                                error: msg => console.error(`[‚ùå] ${msg}`)
                            },
                            timeout: TIMEOUT_DOWNLOAD
                        });

                        if (buffer && buffer.length > 0) {
                            console.log(`[‚úÖ] Download OK na tentativa ${attempts}! ${buffer.length} bytes`);
                            break;
                        } else {
                            throw new Error(`Buffer vazio na tentativa ${attempts}`);
                        }
                    } catch (downloadError) {
                        console.warn(`[‚ö†Ô∏è] Falha tentativa ${attempts}:`, downloadError.message);
                        
                        if (attempts === maxAttempts) {
                            throw downloadError;
                        }
                        
                        await new Promise(resolve => setTimeout(resolve, 2000));
                    }
                }
            } catch (e) {
                console.error("[‚ùå] Download falhou:", e);
                await m.reply("‚ùå Falha no download. Arquivo corrompido ou muito grande.");
                await removeProcessingMsg();
                return;
            }

            // Detec√ß√£o de tipo
            console.log(`[üîç] Detectando tipo...`);
            let fileInfo;
            try {
                fileInfo = await fileType.fromBuffer(buffer);
                if (!fileInfo) {
                    if (mime.startsWith('image/')) {
                        fileInfo = { ext: 'jpg', mime: 'image/jpeg' };
                    } else if (mime.startsWith('video/')) {
                        fileInfo = { ext: 'mp4', mime: 'video/mp4' };
                    } else {
                        throw new Error('Tipo n√£o identificado');
                    }
                }
                console.log(`[‚úÖ] Tipo:`, fileInfo);
            } catch (e) {
                console.error("[‚ùå] Erro na detec√ß√£o:", e);
                await m.reply("‚ùå Formato n√£o reconhecido.");
                await removeProcessingMsg();
                return;
            }

            // Valida√ß√£o
            if (!fileInfo.mime.startsWith('image/') && !fileInfo.mime.startsWith('video/')) {
                await m.reply("‚ùå Use apenas imagem ou v√≠deo.");
                await removeProcessingMsg();
                return;
            }

            // SISTEMA ULTRA INTELIGENTE
            const smartSettings = getUltraSmartSettings(buffer.length);

            const ext = fileInfo.ext || (fileInfo.mime.startsWith('image/') ? 'png' : 'mp4');
            const isVideo = fileInfo.mime.startsWith('video/');
            const isGif = isVideo && (
                quoted.message?.videoMessage?.gifPlayback ||
                m.message?.videoMessage?.gifPlayback ||
                fileInfo.mime === 'image/gif'
            );

            console.log(`[üìä] Informa√ß√µes:`, {
                extension: ext,
                isVideo: isVideo,
                isGif: isGif,
                mime: fileInfo.mime,
                smartSettings: smartSettings
            });

            // Arquivos tempor√°rios
            const uniqueId = Date.now() + Math.floor(Math.random() * 1000);
            const tempFile = path.join(TEMP_DIR, `media_${uniqueId}.${ext}`);
            const outputWebp = path.join(TEMP_DIR, `sticker_${uniqueId}.webp`);

            filesToCleanup.push(tempFile, outputWebp);

            // Salvar arquivo
            console.log(`[üíæ] Salvando arquivo...`);
            try {
                fs.writeFileSync(tempFile, buffer);
                const stats = fs.statSync(tempFile);
                console.log(`[‚úÖ] Arquivo salvo: ${stats.size} bytes`);
                buffer = null; // Liberar mem√≥ria
            } catch (e) {
                console.error("[‚ùå] Erro ao salvar:", e);
                await m.reply("‚ùå Erro ao processar.");
                await removeProcessingMsg();
                cleanupFiles();
                return;
            }

            // Verificar dimens√µes
            try {
                const { stdout } = await execPromise(`ffprobe -v quiet -select_streams v:0 -show_entries stream=width,height -of csv=s=x:p=0 "${tempFile}"`);
                const [width, height] = stdout.trim().split('x').map(Number);
                console.log(`[üìä] Dimens√µes: ${width}x${height}`);

                if (width < MIN_STICKER_SIZE || height < MIN_STICKER_SIZE) {
                    console.log(`[‚ö†Ô∏è] Imagem pequena - melhorando...`);
                    const enhancedFile = path.join(TEMP_DIR, `enhanced_${uniqueId}.${ext}`);
                    filesToCleanup.push(enhancedFile);

                    await execPromise(`ffmpeg -i "${tempFile}" -vf "scale=${MIN_STICKER_SIZE}:${MIN_STICKER_SIZE}:force_original_aspect_ratio=preserve:flags=lanczos" "${enhancedFile}" -y`);

                    if (fs.existsSync(enhancedFile) && fs.statSync(enhancedFile).size > 0) {
                        fs.copyFileSync(enhancedFile, tempFile);
                        console.log(`[‚úÖ] Melhoria aplicada!`);
                    }
                }
            } catch (e) {
                console.warn("[‚ö†Ô∏è] N√£o foi poss√≠vel verificar dimens√µes");
            }

            // COMANDO ULTRA INTELIGENTE SEM BORDAS
            console.log(`[‚öôÔ∏è] Gerando comando ultra inteligente...`);
            let ffmpegCmd;

            if (isVideo || isGif) {
                // T√âCNICA DEFINITIVA: Drawbox para desenhar bordas brancas FOR√áADAS
                ffmpegCmd = `ffmpeg -i "${tempFile}" -vf "fps=${smartSettings.fps},scale=${MAX_ANIMATION_SIZE}:${MAX_ANIMATION_SIZE}:force_original_aspect_ratio=decrease:flags=lanczos,pad=${MAX_ANIMATION_SIZE}:${MAX_ANIMATION_SIZE}:(ow-iw)/2:(oh-ih)/2:color=black,drawbox=x=0:y=0:w=${MAX_ANIMATION_SIZE}:h=8:color=white:t=fill,drawbox=x=0:y=${MAX_ANIMATION_SIZE-8}:w=${MAX_ANIMATION_SIZE}:h=8:color=white:t=fill,drawbox=x=0:y=0:w=8:h=${MAX_ANIMATION_SIZE}:color=white:t=fill,drawbox=x=${MAX_ANIMATION_SIZE-8}:y=0:w=8:h=${MAX_ANIMATION_SIZE}:color=white:t=fill" -c:v libwebp -lossless 0 -compression_level 1 -q:v ${smartSettings.quality} -method 0 -loop 0 -preset default -an -ss 00:00:00 -t 00:00:${smartSettings.duration} "${outputWebp}" -y`;
                console.log(`[üìπ] V√≠deo DRAWBOX FOR√áADO - Desenha bordas brancas (Q:${smartSettings.quality}%, FPS:${smartSettings.fps})`);
            } else {
                // T√âCNICA DEFINITIVA: Drawbox para desenhar bordas brancas FOR√áADAS
                ffmpegCmd = `ffmpeg -i "${tempFile}" -vf "scale=${MAX_STICKER_SIZE}:${MAX_STICKER_SIZE}:force_original_aspect_ratio=decrease:flags=lanczos,pad=${MAX_STICKER_SIZE}:${MAX_STICKER_SIZE}:(ow-iw)/2:(oh-ih)/2:color=black,drawbox=x=0:y=0:w=${MAX_STICKER_SIZE}:h=8:color=white:t=fill,drawbox=x=0:y=${MAX_STICKER_SIZE-8}:w=${MAX_STICKER_SIZE}:h=8:color=white:t=fill,drawbox=x=0:y=0:w=8:h=${MAX_STICKER_SIZE}:color=white:t=fill,drawbox=x=${MAX_STICKER_SIZE-8}:y=0:w=8:h=${MAX_STICKER_SIZE}:color=white:t=fill" -compression_level 1 -q:v ${smartSettings.quality} -method 0 "${outputWebp}" -y`;
                console.log(`[üñºÔ∏è] Imagem DRAWBOX FOR√áADO - Desenha bordas brancas (Q:${smartSettings.quality}%)`);
            }

            // Executar convers√£o
            console.log(`[‚ö°] Executando convers√£o ultra inteligente...`);
            try {
                const { stdout, stderr } = await execPromise(ffmpegCmd, { timeout: TIMEOUT_FFMPEG });

                if (!fs.existsSync(outputWebp) || fs.statSync(outputWebp).size === 0) {
                    throw new Error("WebP n√£o foi gerado");
                }

                // VERIFICA√á√ÉO ULTRA INTELIGENTE DE TAMANHO
                const sizeCheck = await checkFileSizeAndAdjust(outputWebp, smartSettings.targetSizeKB, smartSettings, isVideo || isGif);
                
                if (!sizeCheck.success) {
                    console.log(`[üîÑ] Arquivo muito grande (${sizeCheck.size.toFixed(1)}KB) - Reprocessando...`);
                    
                    // REPROCESSAR COM CONFIGURA√á√ïES ULTRA AGRESSIVAS
                    await reprocessWithUltraSettings(tempFile, outputWebp, smartSettings, isVideo || isGif);
                    
                    // Verificar novamente
                    const finalStats = fs.statSync(outputWebp);
                    const finalSizeKB = finalStats.size / 1024;
                    
                    if (finalSizeKB > smartSettings.targetSizeKB) {
                        console.log(`[‚ö†Ô∏è] Ainda grande (${finalSizeKB.toFixed(1)}KB) mas enviando mesmo assim`);
                    } else {
                        console.log(`[‚úÖ] Agora dentro do limite! ${finalSizeKB.toFixed(1)}KB`);
                    }
                }

                const webpBuffer = fs.readFileSync(outputWebp);
                const finalSizeKB = webpBuffer.length / 1024;
                console.log(`[üìñ] Buffer final: ${finalSizeKB.toFixed(1)}KB`);

                // ENVIO
                console.log(`[üì§] Enviando sticker ultra otimizado...`);
                await Yaka.sendMessage(
                    m.from || m.chat,
                    { sticker: webpBuffer },
                    { quoted: m }
                );
                console.log(`[‚úÖ] Sticker enviado! ${finalSizeKB.toFixed(1)}KB - SEM BORDAS!`);

                await removeProcessingMsg();
                cleanupFiles();

            } catch (err) {
                console.error("[‚ùå] Erro na convers√£o:", err.message);

                // MODO DE EMERG√äNCIA ULTRA AGRESSIVO
                console.log(`[üö®] Ativando modo emerg√™ncia ultra agressivo...`);
                try {
                    const emergencyQuality = 20; // Qualidade m√≠nima
                    const emergencyFPS = 6;      // FPS m√≠nimo
                    const emergencyDuration = 2; // Dura√ß√£o m√≠nima
                    
                    const emergencyCmd = isVideo || isGif
                        ? `ffmpeg -i "${tempFile}" -vf "fps=${emergencyFPS},scale=w='min(400,iw)':h='min(400,ih)':force_original_aspect_ratio=decrease" -t 00:00:${emergencyDuration} -f webp -compression_level 1 -quality ${emergencyQuality} -method 0 "${outputWebp}" -y`
                        : `ffmpeg -i "${tempFile}" -vf "scale=w='min(400,iw)':h='min(400,ih)':force_original_aspect_ratio=decrease" -f webp -compression_level 1 -quality ${emergencyQuality} -method 0 "${outputWebp}" -y`;

                    console.log(`[üö®] Emerg√™ncia: MANT√âM PROPOR√á√ÉO ORIGINAL - ZERO CORTE`);

                    await execPromise(emergencyCmd, { timeout: TIMEOUT_FFMPEG });
                    
                    if (fs.existsSync(outputWebp) && fs.statSync(outputWebp).size > 0) {
                        const webpBuffer = fs.readFileSync(outputWebp);
                        const emergencySizeKB = webpBuffer.length / 1024;
                        console.log(`[‚úÖ] Emerg√™ncia OK! ${emergencySizeKB.toFixed(1)}KB`);

                        await Yaka.sendMessage(
                            m.from || m.chat,
                            { sticker: webpBuffer },
                            { quoted: m }
                        );
                        console.log(`[‚úÖ] Enviado via emerg√™ncia - SEM BORDAS!`);

                        await removeProcessingMsg();
                        cleanupFiles();
                        return;
                    } else {
                        throw new Error("Modo emerg√™ncia falhou");
                    }
                } catch (emergencyErr) {
                    console.error("[‚ùå] Emerg√™ncia falhou:", emergencyErr.message);
                    await m.reply("‚ùå Arquivo muito complexo ou corrompido. Tente com outro v√≠deo menor.");
                    await removeProcessingMsg();
                    cleanupFiles();
                }
            }

        } catch (err) {
            console.error("[üî•] ERRO CR√çTICO:", err.message);
            
            let errorMsg = "‚ùå Erro inesperado.";
            if (err.message.includes('timeout')) {
                errorMsg = "‚ùå Timeout - use arquivo menor.";
            } else if (err.message.includes('ENOSPC')) {
                errorMsg = "‚ùå Espa√ßo insuficiente no servidor.";
            } else if (err.message.includes('ENOMEM')) {
                errorMsg = "‚ùå Mem√≥ria insuficiente - use arquivo menor.";
            }
            
            await m.reply(errorMsg);

            if (processingMsg) {
                try {
                    await Yaka.sendMessage(m.from || m.chat, { delete: processingMsg.key });
                } catch {}
            }

            cleanupFiles();
        }
    }
};