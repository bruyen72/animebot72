const fs = require('fs');
const path = require('path');
const { tmpdir } = require('os');
const { exec } = require('child_process');
const { promisify } = require('util');
const execPromise = promisify(exec);
const fileType = require('file-type');
const { downloadMediaMessage } = require('@whiskeysockets/baileys');

// ==================== CONFIGURA√á√ïES COMPAT√çVEIS COM TODOS DISPOSITIVOS ====================
const MAX_STICKER_SIZE = 512; // M√°ximo WhatsApp
const MAX_ANIMATION_SIZE = 512; // M√°ximo para v√≠deos
const ANIMATION_FPS = 15; // FPS reduzido para menor arquivo
const MAX_VIDEO_DURATION = 6; // Dura√ß√£o reduzida para menor arquivo
const TEMP_DIR = path.join(tmpdir(), 'yaka_stickers');
const WEBP_QUALITY = 75; // Qualidade reduzida para compatibilidade
const MIN_STICKER_SIZE = 430; // Seu valor pedido
const MAX_FILE_SIZE_KB = 500; // M√°ximo 500KB para compatibilidade iPhone/Android

// Garantir que o diret√≥rio tempor√°rio exista
if (!fs.existsSync(TEMP_DIR)) {
    fs.mkdirSync(TEMP_DIR, { recursive: true });
    console.log(`[‚úÖ] Diret√≥rio tempor√°rio criado: ${TEMP_DIR}`);
} else {
    console.log(`[‚ÑπÔ∏è] Diret√≥rio tempor√°rio j√° existe: ${TEMP_DIR}`);
}

module.exports = {
    name: "s",
    alias: [],
    desc: "Converte imagem/v√≠deo/gif para figurinha 512x512 sem bordas",
    category: "Search",
    usage: ".s [responda uma m√≠dia]",
    react: "üñºÔ∏è",
    start: async (Yaka, m, { prefix, quoted, mime, body }) => {
        console.log(`[üöÄ] Comando .s iniciado!`);
        console.log(`[üìã] Par√¢metros recebidos:`, {
            body: body,
            prefix: prefix,
            hasQuoted: !!quoted,
            mime: mime,
            messageType: m.mtype || 'undefined'
        });

        // Inicializar vari√°veis para limpeza
        const filesToCleanup = [];
        let processingMsg = null;

        try {
            // Valida√ß√£o do comando - ignora comandos como .sticker
            console.log(`[üîç] Verificando comando...`);
            if (body && !body.toLowerCase().startsWith('.s')) {
                console.log(`[‚ùå] Comando inv√°lido: ${body}`);
                return;
            }
            console.log(`[‚úÖ] Comando v√°lido!`);

            // Valida√ß√£o da m√≠dia
            console.log(`[üîç] Verificando m√≠dia quotada...`);
            if (!quoted) {
                console.log(`[‚ùå] Nenhuma m√≠dia quotada encontrada`);
                return m.reply(`‚ö†Ô∏è Envie ou responda uma imagem/v√≠deo com ${prefix}s`);
            }
            console.log(`[‚úÖ] M√≠dia quotada encontrada!`);

            // Log detalhado do objeto quoted
            console.log(`[üìä] Estrutura do objeto quoted:`, {
                hasQuoted: !!quoted,
                hasFakeObj: !!quoted.fakeObj,
                quotedMtype: quoted.mtype || 'undefined',
                quotedKeys: quoted ? Object.keys(quoted) : 'N/A'
            });

            // Verificar o tipo MIME
            console.log(`[üîç] Verificando tipo MIME: ${mime}`);
            if (!mime?.startsWith('image/') && !mime?.startsWith('video/')) {
                console.log(`[‚ùå] Tipo MIME inv√°lido: ${mime}`);
                return m.reply(`‚ö†Ô∏è Envie ou responda uma imagem/v√≠deo com ${prefix}s`);
            }
            console.log(`[‚úÖ] Tipo MIME v√°lido: ${mime}`);

            // Verificar se temos ALGUM objeto para download
            console.log(`[üîç] Verificando objetos de m√≠dia...`);
            
            // Verificar m√∫ltiplas possibilidades
            const downloadSources = [
                { name: 'fakeObj', obj: quoted.fakeObj },
                { name: 'message', obj: quoted.message },
                { name: 'quoted direto', obj: quoted }
            ];
            
            let hasValidSource = false;
            downloadSources.forEach(source => {
                if (source.obj) {
                    console.log(`[‚úÖ] ${source.name} dispon√≠vel:`, Object.keys(source.obj));
                    hasValidSource = true;
                } else {
                    console.log(`[‚ùå] ${source.name} n√£o dispon√≠vel`);
                }
            });
            
            if (!hasValidSource) {
                console.error("[‚ùå] Nenhuma fonte de m√≠dia encontrada");
                console.log(`[üìä] Estrutura completa do quoted:`, JSON.stringify(quoted, null, 2));
                return m.reply("‚ùå N√£o consegui acessar os dados da m√≠dia. Estrutura de dados inv√°lida.");
            }
            
            console.log(`[‚úÖ] Pelo menos uma fonte de m√≠dia encontrada!`);

            // Mensagem de processamento
            console.log(`[üì§] Enviando mensagem de processamento...`);
            processingMsg = await m.reply('‚è≥ Criando figurinha 512x512 M√ÅXIMA...');
            console.log(`[‚úÖ] Mensagem de processamento enviada!`);

            // Fun√ß√£o para limpeza de arquivos
            const cleanupFiles = () => {
                console.log(`[üßπ] Iniciando limpeza de ${filesToCleanup.length} arquivos...`);
                filesToCleanup.forEach(file => {
                    if (fs.existsSync(file)) {
                        try {
                            fs.unlinkSync(file);
                            console.log(`[‚úÖ] Arquivo removido: ${file}`);
                        } catch (e) {
                            console.warn(`[‚ö†Ô∏è] Falha ao remover: ${file}`, e);
                        }
                    }
                });
            };

            // Remover mensagem de processamento
            const removeProcessingMsg = async () => {
                if (processingMsg) {
                    try {
                        await Yaka.sendMessage(m.from || m.chat, { delete: processingMsg.key });
                        console.log(`[‚úÖ] Mensagem de processamento removida`);
                    } catch (e) {
                        console.warn("[‚ö†Ô∏è] N√£o consegui apagar a mensagem 'processando'.", e);
                    }
                }
            };

            // Baixar a m√≠dia com M√öLTIPLAS TENTATIVAS
            console.log(`[‚¨áÔ∏è] Iniciando download da m√≠dia...`);
            let buffer;
            try {
                // TENTATIVA 1: Usar fakeObj (m√©todo original)
                console.log(`[üîÑ] Tentativa 1: downloadMediaMessage com fakeObj`);
                try {
                    buffer = await downloadMediaMessage(quoted.fakeObj, 'buffer', {}, {
                        logger: {
                            info: msg => console.log(`[‚ÑπÔ∏è] ${msg}`),
                            error: msg => console.error(`[‚ùå] ${msg}`)
                        },
                        timeout: 60000
                    });
                    
                    if (buffer && buffer.length > 0) {
                        console.log(`[‚úÖ] Sucesso com fakeObj! Tamanho: ${buffer.length} bytes`);
                    } else {
                        throw new Error('Buffer vazio com fakeObj');
                    }
                } catch (fakeObjError) {
                    console.log(`[‚ö†Ô∏è] FakeObj falhou: ${fakeObjError.message}`);
                    
                    // TENTATIVA 2: Usar objeto quoted diretamente
                    console.log(`[üîÑ] Tentativa 2: downloadMediaMessage direto`);
                    try {
                        buffer = await downloadMediaMessage(quoted, 'buffer', {}, {
                            logger: {
                                info: msg => console.log(`[‚ÑπÔ∏è] ${msg}`),
                                error: msg => console.error(`[‚ùå] ${msg}`)
                            },
                            timeout: 60000
                        });
                        
                        if (buffer && buffer.length > 0) {
                            console.log(`[‚úÖ] Sucesso com quoted direto! Tamanho: ${buffer.length} bytes`);
                        } else {
                            throw new Error('Buffer vazio com quoted direto');
                        }
                    } catch (quotedError) {
                        console.log(`[‚ö†Ô∏è] Quoted direto falhou: ${quotedError.message}`);
                        
                        // TENTATIVA 3: Usar message do quoted
                        console.log(`[üîÑ] Tentativa 3: usando quoted.message`);
                        if (quoted.message) {
                            try {
                                buffer = await downloadMediaMessage(quoted.message, 'buffer', {}, {
                                    timeout: 60000
                                });
                                
                                if (buffer && buffer.length > 0) {
                                    console.log(`[‚úÖ] Sucesso com quoted.message! Tamanho: ${buffer.length} bytes`);
                                } else {
                                    throw new Error('Buffer vazio com quoted.message');
                                }
                            } catch (messageError) {
                                console.log(`[‚ö†Ô∏è] Quoted.message falhou: ${messageError.message}`);
                                throw new Error('Todas as tentativas de download falharam');
                            }
                        } else {
                            throw new Error('Nenhum m√©todo de download dispon√≠vel');
                        }
                    }
                }
                
                if (!buffer || buffer.length === 0) {
                    throw new Error('Buffer final vazio ou inv√°lido');
                }

                console.log(`[‚úÖ] Download conclu√≠do! Tamanho final: ${buffer.length} bytes`);
                
            } catch (e) {
                console.error("[‚ùå] TODOS os m√©todos de download falharam:", e);
                console.log(`[üîç] Estrutura do quoted para debug:`, {
                    hasFakeObj: !!quoted.fakeObj,
                    hasMessage: !!quoted.message,
                    quotedKeys: Object.keys(quoted),
                    fakeObjKeys: quoted.fakeObj ? Object.keys(quoted.fakeObj) : 'N/A'
                });
                
                await m.reply("‚ùå N√£o consegui baixar essa m√≠dia. Poss√≠veis solu√ß√µes:\n‚Ä¢ Tente reenviar a imagem\n‚Ä¢ Use outro formato (JPG/PNG)\n‚Ä¢ Verifique se a imagem n√£o est√° corrompida");
                await removeProcessingMsg();
                return;
            }

            // Detectar tipo do arquivo
            console.log(`[üîç] Detectando tipo do arquivo...`);
            let fileInfo;
            try {
                fileInfo = await fileType.fromBuffer(buffer);
                if (!fileInfo) throw new Error('N√£o foi poss√≠vel detectar o tipo de m√≠dia');
                console.log(`[‚úÖ] Tipo detectado:`, fileInfo);
            } catch (e) {
                console.error("[‚ùå] Erro ao detectar tipo do arquivo:", e);
                await m.reply("‚ùå Formato de m√≠dia n√£o reconhecido.");
                await removeProcessingMsg();
                return;
            }

            // Validar tipo de m√≠dia
            console.log(`[üîç] Validando tipo de m√≠dia: ${fileInfo.mime}`);
            if (!fileInfo.mime.startsWith('image/') && !fileInfo.mime.startsWith('video/')) {
                console.warn("[‚ö†Ô∏è] Tipo MIME inv√°lido:", fileInfo.mime);
                await m.reply("‚ùå A m√≠dia n√£o √© uma imagem ou v√≠deo suportado.");
                await removeProcessingMsg();
                return;
            }
            console.log(`[‚úÖ] Tipo de m√≠dia v√°lido!`);

            // Preparar arquivos
            const ext = fileInfo.ext || (fileInfo.mime.startsWith('image/') ? 'png' : 'mp4');
            const isVideo = fileInfo.mime.startsWith('video/');
            const isGif = isVideo && (
                quoted.message?.videoMessage?.gifPlayback ||
                m.message?.videoMessage?.gifPlayback
            );

            console.log(`[üìä] Informa√ß√µes do arquivo:`, {
                extension: ext,
                isVideo: isVideo,
                isGif: isGif,
                mime: fileInfo.mime
            });

            // Gerar nomes de arquivos √∫nicos
            const uniqueId = Date.now() + Math.floor(Math.random() * 1000);
            const tempFile = path.join(TEMP_DIR, `media_${uniqueId}.${ext}`);
            const outputWebp = path.join(TEMP_DIR, `sticker_${uniqueId}.webp`);

            console.log(`[üìÅ] Arquivos tempor√°rios:`, {
                tempFile: tempFile,
                outputWebp: outputWebp
            });

            // Adicionar √† lista de limpeza
            filesToCleanup.push(tempFile, outputWebp);

            // Salvar buffer para arquivo
            console.log(`[üíæ] Salvando buffer em arquivo tempor√°rio...`);
            try {
                fs.writeFileSync(tempFile, buffer);
                console.log(`[‚úÖ] Arquivo tempor√°rio salvo: ${tempFile}`);

                // Verificar se o arquivo foi criado corretamente
                const stats = fs.statSync(tempFile);
                console.log(`[üìä] Tamanho do arquivo salvo: ${stats.size} bytes`);

                // Liberar mem√≥ria
                buffer = null;
            } catch (e) {
                console.error("[‚ùå] Erro ao salvar arquivo tempor√°rio:", e);
                await m.reply("‚ùå Erro ao processar a m√≠dia.");
                await removeProcessingMsg();
                cleanupFiles();
                return;
            }

            // Checar dimens√µes da m√≠dia
            console.log(`[üîç] Verificando dimens√µes da m√≠dia...`);
            try {
                const { stdout } = await execPromise(`ffprobe -v error -select_streams v:0 -show_entries stream=width,height -of csv=s=x:p=0 "${tempFile}"`);
                const [width, height] = stdout.trim().split('x').map(Number);
                console.log(`[üìä] Dimens√µes originais: ${width}x${height}`);

                // Se a imagem for muito pequena, aplicar um escalonamento melhor
                if (width < MIN_STICKER_SIZE || height < MIN_STICKER_SIZE) {
                    console.log(`[‚ö†Ô∏è] Imagem pequena detectada (${width}x${height}), aplicando escalonamento melhorado`);
                    // Preparar um arquivo intermedi√°rio com escala melhorada
                    const enhancedFile = path.join(TEMP_DIR, `enhanced_${uniqueId}.${ext}`);
                    filesToCleanup.push(enhancedFile);

                    // Aplicar escalonamento de alta qualidade SIMPLES
                    await execPromise(`ffmpeg -i "${tempFile}" -vf "scale=512:512:force_original_aspect_ratio=increase:flags=lanczos" "${enhancedFile}" -y`);

                    // Se bem sucedido, substituir o arquivo original pelo melhorado
                    if (fs.existsSync(enhancedFile) && fs.statSync(enhancedFile).size > 0) {
                        fs.copyFileSync(enhancedFile, tempFile);
                        console.log(`[‚úÖ] Imagem melhorada aplicada!`);
                    }
                }
            } catch (e) {
                // Ignorar erros aqui, continuar com o arquivo original
                console.warn("[‚ö†Ô∏è] N√£o foi poss√≠vel verificar/melhorar dimens√µes da m√≠dia:", e);
            }

            // Configurar comando FFmpeg com QUALIDADE ADAPTATIVA
            console.log(`[‚öôÔ∏è] Configurando comando FFmpeg compat√≠vel...`);
            let ffmpegCmd;
            
            // Calcular qualidade baseada no tamanho original
            const originalSizeKB = fs.statSync(tempFile).size / 1024;
            let adaptiveQuality = WEBP_QUALITY;
            let adaptiveFPS = ANIMATION_FPS;
            
            console.log(`[üìä] Tamanho original: ${originalSizeKB.toFixed(1)}KB`);
            
            // Sistema adaptativo para garantir compatibilidade
            if (originalSizeKB > 2000) { // > 2MB
                adaptiveQuality = 60;
                adaptiveFPS = 12;
                console.log(`[‚ö°] Arquivo muito grande - usando qualidade 60% e 12fps`);
            } else if (originalSizeKB > 1000) { // > 1MB
                adaptiveQuality = 70;
                adaptiveFPS = 14;
                console.log(`[‚ö°] Arquivo grande - usando qualidade 70% e 14fps`);
            } else if (originalSizeKB > 500) { // > 500KB
                adaptiveQuality = 75;
                adaptiveFPS = 15;
                console.log(`[‚ö°] Arquivo m√©dio - usando qualidade 75% e 15fps`);
            } else {
                console.log(`[‚úÖ] Arquivo pequeno - mantendo qualidade ${adaptiveQuality}%`);
            }

            if (isVideo || isGif) {
                // Comando para v√≠deos SEM BORDAS - igual imagem 2
                ffmpegCmd = `ffmpeg -i "${tempFile}" -vf "fps=${adaptiveFPS},scale=512:512:force_original_aspect_ratio=decrease:flags=lanczos,pad=512:512:(ow-iw)/2:(oh-ih)/2:color=#00000000" -c:v libwebp -lossless 0 -compression_level 4 -q:v ${adaptiveQuality} -method 4 -loop 0 -preset default -an -vsync 0 -ss 00:00:00 -t 00:00:${MAX_VIDEO_DURATION} "${outputWebp}" -y`;
                console.log(`[üìπ] Comando v√≠deo SEM BORDAS configurado - Q${adaptiveQuality}% FPS${adaptiveFPS}`);
            } else {
                // Comando para imagens SEM BORDAS - igual imagem 2
                ffmpegCmd = `ffmpeg -i "${tempFile}" -vf "scale=512:512:force_original_aspect_ratio=decrease:flags=lanczos,pad=512:512:(ow-iw)/2:(oh-ih)/2:color=#00000000" -compression_level 4 -q:v ${adaptiveQuality} -method 4 "${outputWebp}" -y`;
                console.log(`[üñºÔ∏è] Comando imagem SEM BORDAS configurado - Q${adaptiveQuality}%`);
            }

            console.log(`[‚öôÔ∏è] Comando FFmpeg: ${ffmpegCmd}`);

            // Executar FFmpeg com tratamento de erros melhorado
            console.log(`[‚ö°] Executando convers√£o FFmpeg...`);
            try {
                const { stdout, stderr } = await execPromise(ffmpegCmd);
                console.log(`[üì§] FFmpeg stdout:`, stdout);
                if (stderr) console.log(`[‚ö†Ô∏è] FFmpeg stderr:`, stderr);

                if (!fs.existsSync(outputWebp) || fs.statSync(outputWebp).size === 0) {
                    throw new Error("Arquivo WebP n√£o gerado corretamente.");
                }

                // Verificar o arquivo WebP gerado e VALIDAR TAMANHO
                const webpStats = fs.statSync(outputWebp);
                const webpSizeKB = webpStats.size / 1024;
                console.log(`[‚úÖ] WebP gerado! Tamanho: ${webpSizeKB.toFixed(1)}KB`);
                
                // VALIDA√á√ÉO DE COMPATIBILIDADE
                if (webpSizeKB > MAX_FILE_SIZE_KB) {
                    console.log(`[‚ö†Ô∏è] Arquivo muito grande (${webpSizeKB.toFixed(1)}KB > ${MAX_FILE_SIZE_KB}KB) - incompat√≠vel com iPhone/alguns Androids`);
                    throw new Error(`Arquivo muito grande: ${webpSizeKB.toFixed(1)}KB`);
                } else if (webpSizeKB > 300) {
                    console.log(`[‚ö†Ô∏è] Arquivo grande (${webpSizeKB.toFixed(1)}KB) - pode ter problemas em alguns dispositivos`);
                } else {
                    console.log(`[‚úÖ] Tamanho PERFEITO (${webpSizeKB.toFixed(1)}KB) - compat√≠vel com todos dispositivos!`);
                }

                // Ler o arquivo WebP
                const webpBuffer = fs.readFileSync(outputWebp);
                console.log(`[üìñ] WebP lido em buffer: ${webpBuffer.length} bytes`);

                // Enviar sticker
                console.log(`[üì§] Enviando sticker compat√≠vel...`);
                await Yaka.sendMessage(
                    m.from || m.chat,
                    { sticker: webpBuffer },
                    { quoted: m }
                );

                console.log(`[‚úÖ] Sticker enviado com sucesso!`);
                
                // Mensagem de sucesso com informa√ß√µes
                await m.reply(`üéâ Sticker 512x512 criado!\nüìä Tamanho: ${webpSizeKB.toFixed(1)}KB\n${webpSizeKB <= 300 ? '‚úÖ Compat√≠vel com todos dispositivos!' : webpSizeKB <= MAX_FILE_SIZE_KB ? '‚ö†Ô∏è Grande, mas deve funcionar' : '‚ùå Muito grande - pode falhar'}`);

                // Limpar
                await removeProcessingMsg();
                cleanupFiles();

            } catch (err) {
                console.error("[‚ùå] Erro ao converter com FFmpeg:", err);
                
                // M√©todo alternativo ULTRA COMPAT√çVEL
                console.log(`[üîÑ] Tentando m√©todo ULTRA COMPAT√çVEL...`);
                try {
                    // Comando ultra compat√≠vel SEM BORDAS - igual imagem 2
                    const ultraCompatibleCmd = isVideo || isGif
                        ? `ffmpeg -i "${tempFile}" -vf "fps=10,scale=512:512:force_original_aspect_ratio=decrease:flags=fast_bilinear,pad=512:512:(ow-iw)/2:(oh-ih)/2:color=#00000000" -c:v libwebp -compression_level 6 -q:v 50 -method 1 -t 00:00:04 "${outputWebp}" -y`
                        : `ffmpeg -i "${tempFile}" -vf "scale=512:512:force_original_aspect_ratio=decrease:flags=fast_bilinear,pad=512:512:(ow-iw)/2:(oh-ih)/2:color=#00000000" -compression_level 6 -q:v 50 -method 1 "${outputWebp}" -y`;

                    console.log(`[‚öôÔ∏è] Comando ULTRA COMPAT√çVEL SEM BORDAS: igual imagem 2`);
                    
                    const { stdout: altStdout, stderr: altStderr } = await execPromise(ultraCompatibleCmd);
                    console.log(`[üì§] FFmpeg ultra compat√≠vel conclu√≠do`);
                    if (altStderr) console.log(`[‚ÑπÔ∏è] Avisos:`, altStderr.slice(0, 200));

                    if (fs.existsSync(outputWebp) && fs.statSync(outputWebp).size > 0) {
                        const finalStats = fs.statSync(outputWebp);
                        const finalSizeKB = finalStats.size / 1024;
                        
                        console.log(`[‚úÖ] M√©todo ultra compat√≠vel funcionou! Tamanho: ${finalSizeKB.toFixed(1)}KB`);
                        
                        if (finalSizeKB <= MAX_FILE_SIZE_KB) {
                            const webpBuffer = fs.readFileSync(outputWebp);
                            
                            await Yaka.sendMessage(
                                m.from || m.chat,
                                { sticker: webpBuffer },
                                { quoted: m }
                            );
                            
                            await m.reply(`‚úÖ Sticker COMPAT√çVEL criado!\nüìä Tamanho: ${finalSizeKB.toFixed(1)}KB\nüí™ Qualidade reduzida mas funciona em TODOS dispositivos!`);
                            
                            console.log(`[‚úÖ] Sticker ultra compat√≠vel enviado!`);
                            await removeProcessingMsg();
                            cleanupFiles();
                            return;
                        } else {
                            console.log(`[‚ùå] Mesmo m√©todo ultra compat√≠vel gerou arquivo grande: ${finalSizeKB.toFixed(1)}KB`);
                            throw new Error(`Arquivo ainda muito grande: ${finalSizeKB.toFixed(1)}KB`);
                        }
                    } else {
                        throw new Error("M√©todo ultra compat√≠vel n√£o gerou arquivo v√°lido");
                    }
                } catch (fallbackErr) {
                    console.error("[‚ùå] M√©todo ultra compat√≠vel falhou:", fallbackErr);
                    await m.reply(`‚ùå Arquivo muito complexo para convers√£o compat√≠vel.\n\nüí° **Solu√ß√µes:**\n‚Ä¢ Use imagem mais simples\n‚Ä¢ Tente v√≠deo mais curto\n‚Ä¢ Use arquivo menor\n\nüîç **Problema:** ${fallbackErr.message}`);
                    await removeProcessingMsg();
                    cleanupFiles();
                }
            }

        } catch (err) {
            console.error("[üî•] ERRO FATAL NO .s:", err);
            console.error("[üî•] Stack trace:", err.stack);
            await m.reply("‚ùå Um erro inesperado ocorreu ao gerar a figurinha.");

            // Garantir limpeza mesmo em caso de erro
            if (processingMsg) {
                try {
                    await Yaka.sendMessage(m.from || m.chat, { delete: processingMsg.key });
                } catch {}
            }

            // Limpar arquivos tempor√°rios
            filesToCleanup.forEach(file => {
                if (fs.existsSync(file)) {
                    try {
                        fs.unlinkSync(file);
                    } catch {}
                }
            });
        }
    }
};