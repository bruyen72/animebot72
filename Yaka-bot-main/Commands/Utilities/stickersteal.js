const { Sticker, createSticker, StickerTypes } = require('wa-sticker-formatter');

module.exports = {
    name: "steal",
    alias: ["stickersteal"],
    desc: "Para roubar um sticker",
    category: "Utilit√°rios",
    usage: "steal <responder ao sticker>",
    react: "üëπ",
    start: async (Yaka, m, { text, prefix, quoted, pushName, mime, args }) => {
        try {
            // Verificar se h√° mensagem citada/respondida
            if (!quoted) {
                return Yaka.sendMessage(
                    m.from,
                    { text: `‚ùå *Como usar:*\n\n1Ô∏è‚É£ Responda a um sticker\n2Ô∏è‚É£ Digite: *${prefix}steal*\n3Ô∏è‚É£ Ou: *${prefix}steal nome*\n4Ô∏è‚É£ Ou: *${prefix}steal pacote | autor*\n\nüìù *Exemplo:*\n${prefix}steal bruno\n${prefix}steal bruno | yen` },
                    { quoted: m }
                );
            }

            // Configurar nomes do pacote e autor
            let nomePacote = 'Sticker Roubado';
            let nomeAutor = pushName || 'Usu√°rio Bot';
            
            if (args && args.length > 0) {
                const textoCompleto = args.join(" ");
                if (textoCompleto.includes("|")) {
                    const partes = textoCompleto.split("|");
                    nomePacote = partes[0].trim() || 'Sticker Roubado';
                    nomeAutor = partes[1].trim() || pushName || 'Usu√°rio Bot';
                } else {
                    nomePacote = textoCompleto.trim();
                    nomeAutor = pushName || 'Usu√°rio Bot';
                }
            }

            // Informar que est√° processando
            await m.reply(`üîÑ Roubando sticker...\nüì¶ Pacote: *${nomePacote}*\nüë§ Autor: *${nomeAutor}*`);

            // M√âTODO SIMPLIFICADO DE DOWNLOAD
            let midiaBuffer;
            
            try {
                // M√©todo 1: Usando downloadAndSaveMediaMessage
                if (Yaka.downloadAndSaveMediaMessage) {
                    const fs = require('fs');
                    const caminhoArquivo = await Yaka.downloadAndSaveMediaMessage(quoted);
                    midiaBuffer = fs.readFileSync(caminhoArquivo);
                    fs.unlinkSync(caminhoArquivo); // Limpar arquivo tempor√°rio
                }
                // M√©todo 2: Usando downloadMediaMessage  
                else if (Yaka.downloadMediaMessage) {
                    midiaBuffer = await Yaka.downloadMediaMessage(quoted);
                }
                // M√©todo 3: Usando m√©todo quoted.download
                else if (quoted.download) {
                    midiaBuffer = await quoted.download();
                }
                // M√©todo 4: Fallback manual
                else {
                    throw new Error('M√©todo de download n√£o dispon√≠vel');
                }
                
            } catch (downloadError) {
                console.error('Erro no download:', downloadError);
                
                // TENTATIVA ALTERNATIVA - usando key da mensagem
                try {
                    const msgKey = {
                        remoteJid: m.from,
                        fromMe: false,
                        id: quoted.id || quoted.key?.id
                    };
                    
                    midiaBuffer = await Yaka.downloadMediaMessage({
                        key: msgKey,
                        message: quoted.message || quoted.msg
                    });
                    
                } catch (alternativeError) {
                    console.error('Erro no m√©todo alternativo:', alternativeError);
                    return m.reply('‚ùå Falha ao baixar o sticker! Tente com outro sticker.');
                }
            }
            
            if (!midiaBuffer || midiaBuffer.length === 0) {
                return m.reply('‚ùå Sticker baixado est√° vazio! Tente com outro sticker.');
            }
            
            // Criar novo sticker
            const stickerConfig = {
                pack: nomePacote,
                author: nomeAutor,
                type: StickerTypes.FULL,
                categories: ['ü§©', 'üéâ'],
                id: Date.now().toString(),
                quality: 70,
                background: 'transparent'
            };

            const novoSticker = new Sticker(midiaBuffer, stickerConfig);
            const bufferSticker = await novoSticker.toBuffer();
            
            // Enviar o novo sticker
            await Yaka.sendMessage(m.from, { 
                sticker: bufferSticker 
            }, { 
                quoted: m 
            });

            // Confirmar sucesso
            await m.reply(`‚úÖ *Sticker roubado com sucesso!*\nüì¶ Pacote: *${nomePacote}*\nüë§ Autor: *${nomeAutor}*`);
            
        } catch (error) {
            console.error('Erro completo no comando steal:', error);
            
            // Diagn√≥stico detalhado
            console.log('Informa√ß√µes de debug:');
            console.log('- quoted existe:', !!quoted);
            console.log('- quoted.mtype:', quoted?.mtype);
            console.log('- mime:', mime);
            console.log('- pushName:', pushName);
            console.log('- args:', args);
            
            await m.reply(`‚ùå *Erro ao processar sticker!*\n\nüîß *Tente:*\n1Ô∏è‚É£ Responder a um sticker mais recente\n2Ô∏è‚É£ Certificar que o sticker n√£o est√° corrompido\n3Ô∏è‚É£ Usar um sticker diferente\n\nüí° *Erro t√©cnico:* ${error.message}`);
        }
    }
};